/**
 * <p>Interfaces for managing unique identifiers within a scope.</p>
 * 
 * <p>The core interfaces are {@link Identity}, which represents an identifier, and 
 * {@link IdentityScope}, which returns {@code Identity} instances that are guaranteed unique as
 * long as they are constructed by the same instance of {@code IdentityScope}. There is absolutely
 * no guarantee for identifiers generated by two different scopes to be unique.</p>
 * 
 * <p>A typical use case is shown on the diagram: {@link fr.cnrs.iees.graph.GraphFactory GraphFactory} uses a {@code IdentityScope}
 * internally to construct instances of {@link fr.cnrs.iees.graph.Element Element}s that have a identifier guaranteed unique 
 * among all graph {@code Element}s generated by the same {@code GraphFactory} instance. This
 * allows to build methods to easily retrieve a node or an edge within a graph based on its 
 * identifier.</p>
 * 
 * <p>The {@link Scoped} interface is provided for implementation of classes that are attached
 * to a scope.</p>
 * 
 * <img src="{@docRoot}/../doc/images/identity.svg" align="middle" width="900" alt="identity"/>
 * 
 * <p><strong>WARNING</strong>: although working perfectly, this class hierarchy has some conceptual 
 * flaws; some concepts, like the possibility to ask a scope if a proposed id would fit in its current
 * state, or immutability of identities,  
 * are not properly captured in the current hierarchy and will be refactored soon 
 * (hopefully).</p>
 * 
 * @author Jacques Gignoux - 20 ao√ªt 2021
 *
 */
package fr.cnrs.iees.identity;