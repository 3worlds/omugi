/**************************************************************************
 *  OMUGI - One More Ultimate Graph Implementation                        *
 *                                                                        *
 *  Copyright 2018: Shayne FLint, Jacques Gignoux & Ian D. Davies         *
 *       shayne.flint@anu.edu.au                                          * 
 *       jacques.gignoux@upmc.fr                                          *
 *       ian.davies@anu.edu.au                                            * 
 *                                                                        *
 *  OMUGI is an API to implement graphs, as described by graph theory,    *
 *  but also as more commonly used in computing - e.g. dynamic graphs.    *
 *  It interfaces with JGraphT, an API for mathematical graphs, and       *
 *  GraphStream, an API for visual graphs.                                *
 *                                                                        *
 **************************************************************************                                       
 *  This file is part of OMUGI (One More Ultimate Graph Implementation).  *
 *                                                                        *
 *  OMUGI is free software: you can redistribute it and/or modify         *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation, either version 3 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 *  OMUGI is distributed in the hope that it will be useful,              *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *  GNU General Public License for more details.                          *                         
 *                                                                        *
 *  You should have received a copy of the GNU General Public License     *
 *  along with OMUGI.  If not, see <https://www.gnu.org/licenses/gpl.html>*
 *                                                                        *
 **************************************************************************/
package au.edu.anu.rscs.aot.collections.tables;

import java.util.Arrays;

/**
 * This code was generated by ../../codeGenerators/genPrimitiveClasses.py on Thu Aug 21 10:32:35 2014
 *
 */
/** modified by JG 15/2/2017 to account for Table and DataContainer interfaces */ 
public class IntTable extends TableAdapter {

	protected int[] data;

	public IntTable(Dimensioner... dimensions) {
		super(dimensions);
		data = new int[size()];
	}

	public int getByInt(int... indexes) {
		return data[getFlatIndexByInt(indexes)];
	}

	public void setByInt(int value, int... indexes) {
		data[getFlatIndexByInt(indexes)] = value;
	}

	public int getWithFlatIndex(int index) {
		return data[index];
	}

	public void setWithFlatIndex(int value, int index) {
		data[index] = value;
	}

	public int get(Object... indexes) {
		return data[getFlatIndex(indexes)];
	}

	public void set(int value, Object... indexes) {
		data[getFlatIndex(indexes)] = value;
	}


	@Override
	public IntTable clone() {
		IntTable result = cloneStructure();
		result.copy(this);
		return result;
	}
	
	@Override
	public IntTable cloneStructure() {
		IntTable result = new IntTable(getDimensioners());
		return result;
	}

	public IntTable cloneStructure(int initialValue) {
		IntTable result = cloneStructure();
		result.fillWith(initialValue);
		return result;
	}
	
	public IntTable fillWith(int value) {
		Arrays.fill(data, value);
		return this;
	}
	
	@Override
	public String elementToString(int flatIndex) {
		return String.valueOf(data[flatIndex]);
	}

	@Override
	public IntTable clear() {
		return fillWith(0);
	}

	@Override
	public IntTable fillWith(Object value) {		
		return fillWith(((Integer)value).intValue());
	}

	@Override
	public IntTable copy(Table from) {
		if (Integer.class.isAssignableFrom(from.contentType())) {
			IntTable it = (IntTable)from;
			for (int i=0; i<data.length; i++)
				data[i] = it.data[i];
		}
		return this;
	}
	
	@Override
	public String elementClassName() {
		return Integer.class.getName();
	}

	@Override
	public String elementSimpleClassName() {
		return Integer.class.getSimpleName();
	}

	@Override
	public Class<?> contentType() {
		return Integer.class;
	}
	
	public static IntTable valueOf(String value, char[][] bdel, char[] isep) {
		String ss = TableAdapter.getBlockContent(value,bdel[TABLEix]);
		String d = ss.substring(0,ss.indexOf(bdel[DIMix][BLOCK_CLOSE])+1);
		IntTable result = new IntTable(readDimensioners(d,bdel[DIMix],isep[DIMix]));
		ss = ss.substring(ss.indexOf(bdel[DIMix][BLOCK_CLOSE])+1); 
		String s = null;
		int i=0;
		while (ss.indexOf(isep[TABLEix])>0) {
			s = ss.substring(0,ss.indexOf(isep[TABLEix]));
			ss = ss.substring(ss.indexOf(isep[TABLEix])+1);
			result.data[i] = Integer.valueOf(s);
			i++;
		}
		result.data[i] = Integer.valueOf(ss);
		return result;
	}

}
